39c39
< #include <openssl/sha.h>
---
> 
46,55d45
< #define BLOCK_SIZE 4096
< #define STORAGE_PATH "/.storage/"
< #define META_PATH "/.meta"
< 
< //Global Variables
< int storage_directory_fd;
< int meta_directory_fd;
< 
< 
< 
85d74
<     unsigned char meta_hash[SHA_DIGEST_LENGTH * 2 + 1] = "";
87,102c76,78
<     char meta_file[PATH_MAX] = "";
<     char meta_path[PATH_MAX] = "";
<     char storage_dir_path[PATH_MAX] = "";
<     char block_path[PATH_MAX] = "";
<     char block_name[PATH_MAX] = ""; 
<     int meta_fd;
<     int file_size;
<     DIR *storage_directory_ptr;
<     struct dirent *file;
<     char *hashtoken;
<     struct stat temp_statbuff;
<     char meta_path_refactored[PATH_MAX] = ""; 
<     int i;
< 
< 
<     log_msg("\nbb_getattr(path=\"%s\", statbuf=0x%08x)\n", path, statbuf);
---
>     
>     log_msg("\nbb_getattr(path=\"%s\", statbuf=0x%08x)\n",
> 	  path, statbuf);
107,173d82
<     log_msg("retstat is %d\n", retstat);
<     
<     if(retstat != 0){
<         return retstat;
<     }
< 
<     //Add to "rootdir/meta/{path}"
<     strcat(meta_file, META_PATH);
<     strcpy(meta_path_refactored, path);
<     for(i = 1; i < strlen(meta_path_refactored); i++){
<         if(meta_path_refactored[i] == '/'){
<             meta_path_refactored[i] = '-';
<         }
<     }
<     strcat(meta_file, meta_path_refactored);
<     bb_fullpath(meta_path, meta_file);
< 
<     // Read Meta File
<     meta_fd = log_syscall("open meta", open(meta_path, O_RDWR, 0666), 0);
<     if(meta_fd < 0){
<         //File Al
<         return retstat; 
<     }
< 
<     file_size = 0;
<     while(log_syscall("read meta hash", read(meta_fd, (void *) meta_hash, SHA_DIGEST_LENGTH * 2), 0) != 0){
<         meta_hash[SHA_DIGEST_LENGTH * 2] = '\0';
< 
<         //At "rootdir/storage/"
<         bb_fullpath(storage_dir_path, STORAGE_PATH);
<         storage_directory_ptr = opendir(storage_dir_path);
<         if(!storage_directory_ptr){
<             return retstat; 
<         }
<             
<         while ((file = readdir(storage_directory_ptr)) != NULL){    
<             strcpy(block_name, file->d_name); 
<             hashtoken = strtok(file->d_name, "_");
<             
<             if(strcmp(meta_hash, hashtoken) == 0){
<                 log_msg("    Found File: %s\n", hashtoken);
<                 // build block path string
< 
<                 memset(block_path, 0, PATH_MAX);
< 
<                 strcat(block_path, storage_dir_path);
<                 strcat(block_path, block_name); //Old Path: "rootdir/storage/{hash_count}"
< 
<                 log_msg("block_path is: %s\n", block_path);
< 
<                 retstat = log_syscall("lstat on storage", lstat(block_path, &temp_statbuff), 0);
<                 statbuf->st_size += temp_statbuff.st_size;
<                 statbuf->st_blocks += temp_statbuff.st_blocks;
< 
<                 log_msg("Statbuff Size: %d\n", statbuf->st_size);
< 
<                 break;
<             }
<         }
< 
<         log_syscall("closedir storage", closedir(storage_directory_ptr), 0);
<     }
< 
<     // log_fi(fi);
<     
<     log_syscall("close", close(meta_fd), 0);
< 
175c84
< 
---
>     
259,350d167
<     unsigned char hash[SHA_DIGEST_LENGTH * 2 + 1] = "";
<     char meta_file[PATH_MAX];
<     char meta_dir[PATH_MAX];
<     int meta_fd;
<     struct dirent *file;
<     int storage_fd;
<     DIR *storage_directory_ptr;
<     char *hashtoken;
<     char *refcounttoken;
<     int new_ref_count = 0;
<     char new_ref_count_str[12] = {};
<     char overwrite_path[PATH_MAX] = "";
<     char old_overwrite_path[PATH_MAX] = "";
<     char meta_path_refactored[PATH_MAX] = ""; 
<     int i;
< 
<     log_msg("bb_unlink(path=\"%s\")\n", path);
< 
<     //Add to "rootdir/meta/{path}"
<     strcat(meta_dir, META_PATH); 
<     strcpy(meta_path_refactored, path);
<     for(i = 1; i < strlen(meta_path_refactored); i++){
<         if(meta_path_refactored[i] == '/'){
<             meta_path_refactored[i] = '-';
<         }
<     }
<     strcat(meta_dir, meta_path_refactored);
<     bb_fullpath(meta_file, meta_dir);
< 
<     // Create Meta File
<     meta_fd = log_syscall("open meta", open(meta_file, O_CREAT | O_RDWR, 0666), 0);
<     if(meta_fd < 0){
<         //File Al
< 
<         return BLOCK_SIZE; 
<     }
< 
<     // Parse meta file; search for each block using its hash and decrement its counter;
<     // if the counter reaches 0 then delete the block
<     while (log_syscall("read from meta", read(meta_fd, (void *) hash, SHA_DIGEST_LENGTH * 2), 0) != 0){
<         hash[SHA_DIGEST_LENGTH * 2] = '\0';
< 
<         //At "rootdir/storage/"
<         bb_fullpath(fpath, STORAGE_PATH);
< 
<         storage_directory_ptr = opendir(fpath);
<         if(!storage_directory_ptr){
<             return -1; 
<         }
<             
<         while ((file = readdir(storage_directory_ptr)) != NULL){
<             hashtoken = strtok(file->d_name, "_");
<             refcounttoken = strtok(NULL, "_");
< 
<             if(strcmp(hashtoken, hash) == 0){
<                 memset(old_overwrite_path, 0, PATH_MAX);
< 
<                 strcat(old_overwrite_path, fpath);
<                 strcat(old_overwrite_path, hashtoken); //Old_overwrite Path: "rootdir/storage/{hash_count}"
<                 strcat(old_overwrite_path, "_");
<                 strcat(old_overwrite_path, refcounttoken);
<                 
<                 // decrement the ref count 
<                 new_ref_count = atoi(refcounttoken);
<                 new_ref_count--;
< 
<                 if (new_ref_count == 0){
<                     log_syscall("unlink block", unlink(old_overwrite_path), 0);                            
<                 }
<                 else{
<                     sprintf(new_ref_count_str, "%d", new_ref_count); 
< 
<                     memset(overwrite_path, 0, PATH_MAX);
<                     // create the new data block name
<                     strcat(overwrite_path, fpath);
<                     strcat(overwrite_path, hashtoken);
<                     
<                     // append the new ref count to the overwrite file path
<                     strcat(overwrite_path, "_");
<                     strcat(overwrite_path, new_ref_count_str);
< 
<                     log_syscall("rename", rename(old_overwrite_path, overwrite_path), 0);
<                 }
< 
<                 break;
<             }
<         }
< 
<         closedir(storage_directory_ptr);
<     }
< 
<     log_syscall("unlink", unlink(meta_file), 0);
351a169,170
>     log_msg("bb_unlink(path=\"%s\")\n",
> 	    path);
513,601d331
< 
< int bb_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi)
< {
<     int retstat = 0;
<     char meta_file[PATH_MAX] = "";
<     int meta_fd;
<     unsigned char meta_hash[SHA_DIGEST_LENGTH * 2 + 1] = "";
<     char meta_path[PATH_MAX] = "";
<     char storage_dir_path[PATH_MAX] = "";
<     DIR *storage_directory_ptr;
<     char block_path[PATH_MAX] = "";
<     int block_fd;
<     char block_name[PATH_MAX] = "";    
<     char *hashtoken;
<     struct dirent *file;
<     char block[BLOCK_SIZE] = "";
<     char meta_path_refactored[PATH_MAX] = "";
<     int i = 0;
<     
<     log_msg("\nbb_read(path=\"%s\", buf=0x%08x, size=%d, offset=%lld, fi=0x%08x)\n", path, buf, size, offset, fi);
<     // no need to get fpath on this one, since I work from fi->fh not the path
< 
<     //Add to "rootdir/meta/{path}"
<     strcat(meta_file, META_PATH);
<     strcpy(meta_path_refactored, path);
<     for(i = 1; i < strlen(meta_path_refactored); i++){
<         if(meta_path_refactored[i] == '/'){
<             meta_path_refactored[i] = '-';
<         }
<     } 
<     strcat(meta_file, meta_path_refactored);
<     bb_fullpath(meta_path, meta_file);
< 
<     // Read Meta File
<     meta_fd = log_syscall("open meta", open(meta_path, O_RDWR, 0666), 0);
<     if(meta_fd < 0){
<         //File Al
<         return BLOCK_SIZE; 
<     }
< 
<     log_syscall("lseek meta", lseek(meta_fd, (offset / BLOCK_SIZE) * (SHA_DIGEST_LENGTH * 2), SEEK_SET), 0);
< 
<     i = 0;
<     while(log_syscall("read meta hash", read(meta_fd, (void *) meta_hash, SHA_DIGEST_LENGTH * 2), 0) != 0){
<         meta_hash[SHA_DIGEST_LENGTH * 2] = '\0';
< 
<         //At "rootdir/storage/"
<         bb_fullpath(storage_dir_path, STORAGE_PATH);
<         storage_directory_ptr = opendir(storage_dir_path);
<         if(!storage_directory_ptr){
<             log_syscall("close", close(meta_fd), 0);
<             return -1; 
<         }
<             
<         while ((file = readdir(storage_directory_ptr)) != NULL){    
<             strcpy(block_name, file->d_name); 
<             hashtoken = strtok(file->d_name, "_");
< 
<             if(strcmp(meta_hash, hashtoken) == 0){
<                 // build block path string
<                 memset(block_path, 0, PATH_MAX);
<                 strcat(block_path, storage_dir_path);
<                 strcat(block_path, block_name); //Old Path: "rootdir/storage/{hash_count}"
< 
<                 // Read Block
<                 block_fd = log_syscall("open block for read", open(block_path, O_RDWR, 0666), 0);
<                 log_syscall("read block", read(block_fd, (void*) buf + (i * BLOCK_SIZE), BLOCK_SIZE), 0);
< 
<                 //Close File
<                 log_syscall("close", close(block_fd), 0);
<                 
<                 i++;
<                 
<                 break;
<             }
<         }
< 
<         log_syscall("closedir storage", closedir(storage_directory_ptr), 0);
<     }
< 
<     log_fi(fi);
< 
<     log_syscall("close", close(meta_fd), 0);
< 
<     // return log_syscall("pread", pread(fi->fh, buf, size, offset), 0);
<     return size;
< }
< 
< /*
607c337
<             path, buf, size, offset, fi);
---
> 	    path, buf, size, offset, fi);
611,612c341
<    return log_syscall("pread", pread(fi->fh, buf, size, offset), 0);
< 
---
>     return log_syscall("pread", pread(fi->fh, buf, size, offset), 0);
614d342
< */
626,820c354,357
< int bb_write(const char *path, const char *buf, size_t size, off_t offset, struct fuse_file_info *fi){
<     int retstat = 0, i = 0;
<     unsigned char hash[SHA_DIGEST_LENGTH] = "";
<     unsigned char old_hash[SHA_DIGEST_LENGTH * 2 + 1] = "";
<     char fpath[PATH_MAX];
<     char storage_file[PATH_MAX] = "";
<     char meta_file[PATH_MAX] = "";
<     char old_path[PATH_MAX] = "";
<     char new_path[PATH_MAX] = "";
<     int storage_fd;
<     int meta_fd;
<     char raw_name[SHA_DIGEST_LENGTH * 2];
<     struct dirent *file;
<     DIR *storage_directory_ptr;
<     char *hashtoken;
<     char *refcounttoken;
<     int new_ref_count = 0;
<     char new_ref_count_str[12] = {};
<     int found = 0;
<     int bytes_written = BLOCK_SIZE;
< 
<     unsigned char search_hash[SHA_DIGEST_LENGTH * 2 + 1] = "";
<     char overwrite_path[PATH_MAX] = "";
<     char old_overwrite_path[PATH_MAX] = "";
<     char meta_path_refactored[PATH_MAX] = "";
<     //Log Write    
<     log_msg("\nbb_write(path=\"%s\", buf=0x%08x, size=%d, offset=%lld, fi=0x%08x)\n", path, buf, size, offset, fi);
< 
<     //Add to "rootdir/meta/{path}"
<     strcat(meta_file, META_PATH); 
<     strcpy(meta_path_refactored, path);
<     for(i = 1; i < strlen(meta_path_refactored); i++){
<         if(meta_path_refactored[i] == '/'){
<             meta_path_refactored[i] = '-';
<         }
<     }
<     strcat(meta_file, meta_path_refactored);
<     bb_fullpath(fpath, meta_file);
< 
<     // Create Meta File
<     meta_fd = log_syscall("open meta", open(fpath, O_CREAT | O_RDWR, 0666), 0);
<     if(meta_fd < 0){
<         //File Al
< 
<         return BLOCK_SIZE; 
<     }
< 
<     //Create a Hash from Buffer
<     SHA1(buf, size, hash);        
< 
<     for (i=0; i < SHA_DIGEST_LENGTH; i++) {
<         sprintf((char*)&(raw_name[i*2]), "%02x", hash[i]);
<     }
< 
< 
<     //At "rootdir/storage/"
<     bb_fullpath(fpath, STORAGE_PATH);
<     storage_directory_ptr = opendir(fpath);
<     if(!storage_directory_ptr)
<         return -1; 
< 
<     while ((file = readdir(storage_directory_ptr)) != NULL){
<         hashtoken = strtok(file->d_name, "_");
<         refcounttoken = strtok(NULL, "_");
< 
<         if(strcmp(hashtoken, raw_name) == 0){
<             strcat(old_path, fpath);
<             strcat(old_path, hashtoken); //Old Path: "rootdir/storage/{hash_count}"
<             strcat(old_path, "_");
<             strcat(old_path, refcounttoken);
< 
<             // increment the ref count 
<             new_ref_count = atoi(refcounttoken);
<             new_ref_count++;            
<             sprintf(new_ref_count_str, "%d", new_ref_count); 
< 
<             // create the new data block name
<             strcat(new_path, fpath);
<             strcat(new_path, hashtoken);
<             
<             // append the new ref count to the new file path
<             strcat(new_path, "_");
<             strcat(new_path, new_ref_count_str);
< 
<             log_syscall("rename", rename(old_path, new_path), 0);
<             
<             // Check if the block we want to write in the file already exists in the correct position
<             log_syscall("lseek meta", lseek(meta_fd, (offset / BLOCK_SIZE) * (SHA_DIGEST_LENGTH * 2), SEEK_SET), 0);
< 
<             if(log_syscall("read from meta", read(meta_fd, (void *) search_hash, SHA_DIGEST_LENGTH * 2), 0) != 0){
<                 search_hash[SHA_DIGEST_LENGTH * 2] = '\0';
< 
<                 if (strcmp(search_hash, raw_name) == 0){
<                     
<                     // Close Meta File
<                     log_syscall("close", close(meta_fd), 0);
<                     closedir(storage_directory_ptr);
<             
<                     return BLOCK_SIZE;
<                 }
<             }
< 
<             found = 1;
<             
<             break;
<         }
<     }
< 
<     closedir(storage_directory_ptr);
< 
<     // Block not found => create block
<     if (found != 1){
<         //Add to "rootdir/storage/{hash}_counter"
<         strcat(storage_file, STORAGE_PATH); 
<         strcat(storage_file, raw_name);
<         strcat(storage_file, "_1");
<         bb_fullpath(fpath, storage_file);
< 
<         //Creat Storage Block File
<         storage_fd = log_syscall("open storage", open(fpath, O_CREAT | O_WRONLY, 0666), 0);
<         if(storage_fd < 0){
<             //File Al
<             return BLOCK_SIZE; 
<         }
< 
<         // no need to get fpath on this one, since I work from fi->fh not the path
<         log_fi(fi);
<         bytes_written = log_syscall("pwrite", pwrite(storage_fd, buf, size, offset), 0);
<         log_syscall("close", close(storage_fd), 0);
<     }
< 
<    
<     // Write to metafile
<     log_syscall("lseek meta", lseek(meta_fd, (offset / BLOCK_SIZE) * (SHA_DIGEST_LENGTH * 2), SEEK_SET), 0);
<  
<     // Search for old hash in meta file; if it exists (e.g we are not appending the block at the end of the meta file)
<     // we decrement the refcount of the old hash block by 1. If that refcount becomes 0 the block is not in use anymore
<     // and is thus deleted. We overwrite the old hash in the metafile with the new block 
<     if(log_syscall("read from meta", read(meta_fd, (void *) old_hash, SHA_DIGEST_LENGTH * 2), 0) != 0){
<         old_hash[SHA_DIGEST_LENGTH * 2] = '\0';
< 
<         // old_hash = hash from meta file
<         // raw_name = hash from SHA 
<         
<         //At "rootdir/storage/"
<         bb_fullpath(fpath, STORAGE_PATH);
< 
<         storage_directory_ptr = opendir(fpath);
<         if(!storage_directory_ptr)
<             return -1; 
< 
<         while ((file = readdir(storage_directory_ptr)) != NULL){
<             hashtoken = strtok(file->d_name, "_");
<             refcounttoken = strtok(NULL, "_");
< 
<             if(strcmp(hashtoken, old_hash) == 0){
<                 strcat(old_overwrite_path, fpath);
<                 strcat(old_overwrite_path, hashtoken); //Old_overwrite Path: "rootdir/storage/{hash_count}"
<                 strcat(old_overwrite_path, "_");
<                 strcat(old_overwrite_path, refcounttoken);
<                 
<                 // decrement the ref count 
<                 new_ref_count = atoi(refcounttoken);
<                 new_ref_count--;
< 
<                 if (new_ref_count == 0){
<                     log_syscall("unlink block", unlink(old_overwrite_path), 0);                            
<                 }
<                 else{
<                     sprintf(new_ref_count_str, "%d", new_ref_count); 
< 
<                     // create the new data block name
<                     strcat(overwrite_path, fpath);
<                     strcat(overwrite_path, hashtoken);
<                     
<                     // append the new ref count to the overwrite file path
<                     strcat(overwrite_path, "_");
<                     strcat(overwrite_path, new_ref_count_str);
< 
<                     log_syscall("rename", rename(old_overwrite_path, overwrite_path), 0);
<                 }
<                 
<                 log_syscall("lseek meta", lseek(meta_fd, -(SHA_DIGEST_LENGTH * 2), SEEK_CUR), 0);
< 
<                 break;
<             }
<         }
< 
<         closedir(storage_directory_ptr);
<     }
<     
<     log_syscall("ovewrite old hash", write(meta_fd, (void *) raw_name, (SHA_DIGEST_LENGTH * 2)), 0);
<    
<     // Close Meta File
<     log_syscall("close", close(meta_fd), 0);
---
> int bb_write(const char *path, const char *buf, size_t size, off_t offset,
> 	     struct fuse_file_info *fi)
> {
>     int retstat = 0;
822c359,365
<     return bytes_written;
---
>     log_msg("\nbb_write(path=\"%s\", buf=0x%08x, size=%d, offset=%lld, fi=0x%08x)\n",
> 	    path, buf, size, offset, fi
> 	    );
>     // no need to get fpath on this one, since I work from fi->fh not the path
>     log_fi(fi);
> 
>     return log_syscall("pwrite", pwrite(fi->fh, buf, size, offset), 0);
1153d695
<     char fpath[PATH_MAX];
1156,1163d697
<     //Create a Storage Directory on "example/rootdir/storage/"
<     bb_fullpath(fpath, STORAGE_PATH);
<     storage_directory_fd = log_syscall("Create Storage", mkdir(fpath, S_IRWXU), 0);
< 
<     //Create a Meta Directory on "example/rootdir/meta/"
<     bb_fullpath(fpath, META_PATH);
<     meta_directory_fd = log_syscall("Create Meta", mkdir(fpath, S_IRWXU), 0);
< 
1234,1236d767
<  {}
<         
<     
1259c790,792
<  * file information isthis is only called after the create() method if that
---
>  * file information is available.
>  *
>  * Currently this is only called after the create() method if that
